





### Vue.js

Vue - https://vuejs.org - is like React - https://reactjs.org - but a bit easier. I really recommend going through the Vue.js documentation/tutorial, it's really really really really really good.






### BASIC APPLICATION

A basic app has data (which is just normal data), computed data (where you do stuff to your data), and methods (which response to actions).

    var app = new Vue({
      el: '#app',
      data: {
      },
      computed: {
      },
      methods: {
      }
    })

If you want to do something when it loads (like read in data)  you also want to have a 'created'

    var app = new Vue({
      el: '#app',
      data: {
      },
      computed: {
      },
      methods: {
      },
      created: {
      }
    })




### CONDITIONALS

If you only want something to display if something has a value, or if something is true:

    <div v-if="message">{{ message }}</div>
    <div v-if="cats.length > 4">You have too many cats</div>



### FILL IN THE BLANKS

To have a fill-in-the-blanks, use {{ }}. In the example below, linkText should be in our 'data' or 'computed' sections

    <a href="http://www.google.com">{{ linkText }}</a>







### ATTACH DATA TO AN HREF OR SRC

To attach our data to an attribute (like href or src, use v-bind). In the example below, magicURL and imageSource should be in our 'data' or 'computed' sections

    <a v-bind:href="magicURL">This is a link with an href from our app</a>

    <img v-bind:src="imageSource">







### ATTACH ACTION TO A CLICK (OR OTHER ACTION)

To make something happen when you click a button. In the example below, 'buttonClick' should be in our 'methods' section.

    <a class="btn btn-danger" v-on:click="buttonClick">






### ATTACH DATA TO A FORM FIELD

If you want to type in a form field and have it saved, use v-model

    <input type="text" v-model="name">







### FOR LOOPS

To loop through something, use v-for. In the example below, 'names' should be in our 'data' or 'computed' sections

    <ul>
      <li v-for="name in names">{{ name }}</li>
    </ul>






### READ IN DATA

You do this when the app is 'created'

  created: function () {
    Papa.parse("schools-geocoded.csv", {
      download: true,
      header: true,
      skipEmptyLines: true,
      complete: function(parsed) {
      }
    })
  }






### FILTER A LIST

Case sensitive:

    return app.newspapers.filter(function(newspaper) {
      return newspaper.name.indexOf(app.query) !== -1
    })

Case insensitive:

    return app.newspapers.filter(function(newspaper) {
      searchString = app.query.toLowerCase()
      name = newspaper.name.toLowerCase()
      return name.indexOf(searchString) !== -1
    })






### GOOGLE MAPS IMAGE API

Images are easier than Leaflet maps when working with Vue (...sometimes, kind of, mostly). The Google Maps Image API makes images instead of slippy maps, like this: https://maps.googleapis.com/maps/api/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key=AIzaSyDsCbhB9DNy47KcdhiG6wcktjteuGLuKfU

We'll use this function:

    schoolMapSrc: function () {
      var apikey = "AIzaSyDsCbhB9DNy47KcdhiG6wcktjteuGLuKfU"
      var coords = this.currentSchool.latitude + "," + this.currentSchool.longitude
      return "https://maps.googleapis.com/maps/api/staticmap?center=" + coords + "&zoom=13&scale=1&size=400x300&maptype=roadmap&key=" + apikey + "&format=png&visual_refresh=true&markers=label:|" + coords
    }

Get your own API key here: https://developers.google.com/maps/documentation/static-maps/



